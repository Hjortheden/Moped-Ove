Additions:
before building a plugin, you need to build api.
build with Maven (mvn clean install)




For clearing the simulator, do rm apps/* and rm db/*
And same in can-utils/java on the TCU.
You may need to use sudo.

XXX describe what the plugin code should look like, and how it is compiled.

See PlugInManual.docx. That document is old, and some parts need updating.
Some parts are useful.

pom.xml
plugin configuration file (XML)
ports

See moped-ports.txt

The simulator only supports a subset of the sensors and actuators.
See moped-simulator.txt


To create a template for a new plugin, use the script plugins/new-plugin.sh.

Existing plugins (and the ports they use):

For VCU:

    AdcPub (0,7)
	publishes the battery value
    AP (3,4,5,6)
	"auto path" - accelerates and turns here and there
	when the actual wheel speed is near zero, it's defined as an
	obstacle and the car reverses
    BWPub (0,6)
    CL ()
    Circle (3,4)
	runs at varying speeds in a small circle
    Comm1 (SCU)
    Comm2 (VCU)
	Comm1 and Comm2 run on separate ECU's and communicate
    DistPub (0,13)
	publishes distance
    FWPub (0,5)
    LEDLighter (9)
	lights and extinguishes all three LEDs, periodically
    Platoon (3,15)
    PluginCreationTest ()
	writes only something on stdout
    PluginCreationTest2 (4)
    PluginCreationTest3 (4)
    PosPub (0,8)
    SemiAutomaticReverseParking (0,4,5,9)

For SCU:
    IMUPub (0,14)
    UltraSonicReader (13,VCU)
	reads distance and sends it to a port where AutoBrake will read it


In addition, AutoBrake (3,9,SCU) exists, but is not compilable. This
may be easily fixed. Also BurningWheels (which may use an older way of
communicating).



A plugin P needs a 'main' method, a constructor P() and a constructor
P(String [] args).

The simulator calls it with the 'main' method. On autosar, the one-argument
constructor is used.

The zero-argument constructor seems not to be called, but if it isn't there,
the simulator will fail to load the plugin.

Don't forget super(args) in the constructor.


InterruptedException should be caught in plugins.
Works sometimes, but not always. This ought to be the correct way to
kill a Java thread. It is done when a running plugin is reinstalled.


To compile and install a plugin, for example LEDLighter:

1) cd plugins/LEDLighter
   mvn clean install

2) Upload the plugin jar file to the trusted server (from the plugin's
target directory). In the GUI, use the Application Upload page.

3) The plugin is now visible on the page Apps Gallery. To put it on a car,
two things are required: the car must be on and have contacted the trusted
server; and the car must be the active vehicle in the GUI. To make it the
active vehicle, go to the Vehicle Configuration Upload and Associations page.
If the car is not available there, upload its vehicle configuration file
(make a copy of simulator/configs/system1.xml and change the 'vin' entry
to what you want the car to be called).

When the car is the active vehicle in the Apps Gallery, press the Install
button for the plugin. The plugin should now be sent to the car and started
there.


How to do the same things without using the GUI is shown by the script
server/misc/init-moped.sh.


------------------------------------------------------------
Various notes about problems with Java:

Java j2me doesn't contain String.split.
See http://stackoverflow.com/questions/200746/how-do-i-split-strings-in-j2me


When such a construct is used, testmoped.uploadplus gives an error, but
the plugin is put in place anyway and can then be installed, with various
errors on the VCU/SCU.


floating args to string concatenation.
Error when compiling with squawk:

      	   	        double speed;
			String sss;
			sss = " at speed = " +
			    speed;

Reported by user-compile by a large but noninformative stack trace.
Better reported with retroweaver (user-compile-r).
Does it help if we do preprocess first in user-compile-r?

Workaround: put Double.toString() around the doubles.
This happened in SemiAutomaticReverseParking.


log, sin, etc.

j2me doesn't have atan2 etc. Found this class:
http://www.java2s.com/Code/Java/Data-Type/ClassforfloatpointcalculationsinJ2MEapplicationsCLDC.htm


In SemiAutomaticReverseParking, there is a comment that Math.round is not
there, but MathUtils has it.

------------------------------------------------------------

package plugins;

import java.io.IOException;
import com.sun.squawk.VM;
import sics.port.PluginPPort;
import sics.port.PluginRPort;
import sics.plugin.PlugInComponent;

public class PLUGINNAME extends PlugInComponent {
    //private PluginPPort fs;
    //private PluginRPort ff;
	
    public PLUGINNAME() {}
	
    public PLUGINNAME(String[] args) {
	super(args);
    }
	
    public static void main(String[] args) {
	PLUGINNAME plugin = new PLUGINNAME(args);
	plugin.run();
    }

    public void init() {
	//fs = new PluginPPort(this, "fs");
	//ff = new PluginRPort(this, "ff");
    }
	
    public void doFunction() throws InterruptedException {
    }

    public void run() {
	init();

	try {
	    doFunction();
	} catch (InterruptedException e) {
	    VM.println("**************** Interrupted.");
	    return;
	}
    }
}
