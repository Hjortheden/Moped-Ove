Here is a list of either problem areas or interesting tasks.


* CAN bus handling
Our code in autosar which handles CAN is less than perfect: it has a naive
implementation of cantp, which means that if a sequence of packets comprising
one large message is interrupted by a packet with another destination, one
of them will fail. Attempts to keep separate buffers of packets have been
made.

* Optipos
It should be possible to improve the Optipos positioning, for example by
identifying several markers and check that those can actually be
visible at the same time.

* Positioning
Obtaining the most likely position of a car is the result of a process
involving Optipos, dead reckoning and perhaps ultrasonic distance measuring,
all of which have inherent errors. This process can be improved.
Kalman filter, perhaps. Using the full information from the IMU with
known techniques.

* Navigation
The current code for making the car follow a sequence of points is
probably not optimal.

* Roadless navigation
Getting from one point to another where there is no road network is
a separate problem.

* 4D/RCS
The 4D/RCS architecture has been used to some extent: nav1.py and nav2.py
work in that way. But all attempts to handle unforeseen events are ad-hoc
today, and should be handled in a well-defined way by the architecture,
and the speed keeping is done outside it.

* Road network
The current road network is somewhat encapsulated in the file eight.py,
but the identities of important waypoints are used explicitly in several
places.

* Traffic rules
The traffic rules, as implemented in the traffic controller, are very
dependent on the current shape of the road network, i.e., eight.py.
Ideally, no special code should be needed, but only knowledge of the
network itself.

* Traffic behaviour
Interesting additions to our code now are: overtaking.

* MQTT
MQTT handling needs to be made more stable. There are bugs in our Java code
that cause simultaneous requests to fail. One goal is to make battery
level reporting reliable - now it often stops after a while.

* Car identity
As the number of cars rises, it becomes more interesting to get away from
having individual SD cards for each TCU. They should be able to tell who
they are from their MAC addresses. This also makes it easier to
handle configuration data.

* More ultrasonic information
1) To begin with, use the existing information better.
2) I have new ultrasonic sensors that should be tried out.
3) Do something useful with the idea of mounting a movable ultrasonic
sensor on a servo.

* Plugins
1) Investigate the idea of collecting plugins into applications.
2) Handle plugins appropriately depending on their compatibility with
the car where they are to be installed.
3) Dependencies/conflicts between plugins.

* Android app
Add some useful functions, such as picking one of a number of earlier
used cars, and receiving messages from a car.
