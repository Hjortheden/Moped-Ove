
When all the parts are up and running and connected, it looks like this:

GUI
 an Apache server, with Wordpress, and a mysql database

server
 also uses a mysql database

traffic control

simulator

GtkTerm (or equivalent program)
 a terminal emulator for looking at serial traffic, running on a computer

Android remote control

car

keyboard

screen

Cables between some of the parts (only when debugging):
 from car (UART to USB) to GtkTerm
 from car (USB port) to keyboard
 from car (video port) to screen
 from car (ethernet port) to computer

Internet access (or wifi if everything is on the same network) for
connecting the router to the server.



The functions on computers may be realised on the same computer, or
different ones.

You may also want to use an ssh app on the Android to connect
interactively to the car.



On the car are three Raspberry Pi boards, each with one SD card. One
of them handles all external communication and is called the TCU and
runs Linux.  The other two handles the local sensors and actuators and
run the operating system autosar. They are called VCU and SCU. See
moped-car.txt for specific details.

The code running on the TCU is a Java program called Ecm, which uses C code
compiled into a sharable library libjavaCanBus.so for the communication
with SCU and VCU (over what is called the CAN bus).

The TCU code consists of the ecm-core and ecm-linux modules.

The code running on the SCU and VCU is the autosar operating system,
with a Java runtime system added.
The modules squawk and autosar are built, and a file kernel.img is
produced, which is put on the SD card.

The simulator module simulates a car. It reimplements parts from ecm-linux
and squawk, and uses ecm-core. It doesn't attempt to simulate the autosar
structure, and doesn't implement all sensors and actuators.
See moped-simulator.txt



The VCU/SCU run so-called plugins, which are written in Java. When
a plugin has been built, it is uploaded to the server. Then a car is
selected and the plugin installed on it. When the plugin is installed
on the car, it first comes to the TCU, which stores it in its file
system and sends it on to the VCU/SCU that should
have it. When the plugin arrives in the VCU/SCU, the node starts
executing it. If it stops (whether crashing or normally), it is not
restarted automatically - nor is it if the node is restarted. If the
whole car is restarted, the TCU sends its plugins again to the VCU/SCU.

A plugin may be uninstalled, in which it is removed from the TCU, and stopped
on the VCU/SCU, if running.

The upload, installation etc. operations can be done with a GUI which sends
requests to the server, or by sending requests directly to the server using
a web service interface. See moped-server-api.txt.

The VCU and SCU can communicate with each other (for example one
plugin on VCU using the distance read on SCU to affect the driving),
and also send data to the TCU for publication using MQTT.

--------------------------------------------------
Additional documentation apart from these files:

https://twiki.sics.se/bin/view/FRESTA/MOPED
https://twiki.sics.se/bin/view/FRESTA/DocumentationOnTheSimulator
https://twiki.sics.se/bin/view/FRESTA/TechnicalReferences#AutoSAR

moped/doc/PluginManual.docx

--------------------------------------------------

Illustrations:

doc/illustration/diagrams
	battery
	brakingdist
	doc-map
	motor-speed
	steeringhysteresis
	motorspeed-not-monotonic
doc/illustration/drawings
	Car
	communication1
	communication2
	pins
doc/illustration/photos
	car-from-above

"battery" shows the profile of how the battery voltage sinks with
time. (The time scale is uncertain, probably 5s per sample, but the
rate is dependent on what the car does, anyway.)

"brakingdist" shows how far the car travels after getting a command to
stop, related to speed.

"doc-map" is a schematic map of the documentation files.

"motor-speed" shows how the speed in cm/s depends on the command given
to the ESC, at two different voltages of the battery.

"steeringhysteresis" shows how the angle of the front wheels (or rather
a geometric quantity depending almost linearly on the angle) behaves
when the wheels are turned stepwise to the left, to the right and back
again.

"motorspeed-not-monotonic" shows that the speed does not always
increase with increasing values sent to the ESC.

"Car" is a schematic view of the car from above, with and without the
top plate.

"communication1" shows the various entities outside the car, with which
it communicates.

"communication2" shows the information flow within one car.

"pins" shows the pin layout of the SCU, VCU and some other boards.

"car-from-above" is a photo from above of one car.
